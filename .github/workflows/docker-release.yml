name: builddocker
# git push origin 0.5.3 to push local to remote
on:
  workflow_dispatch:
  push:
    tags: ["[0-9]+.[0-9]+.[0-9]+*"]

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

       # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
  
      -
        name: build
        run: |
        docker buildx build  --platform linux/arm64 .
        docker run --rm --entrypoint cat everydaytask/builder:latest /usr/local/bin/task > task
      
      - name: Create output directory
        run: mkdir output
      - name: Copy files to output
        run: cp task output\
      
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: arm64
          path: output/*
      
  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs:
      - arm64
    
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Determine Release Info
        id: info
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          VERSION=${GITHUB_REF##*/}
          MAJOR=${VERSION%%.*}
          MINOR=${VERSION%.*}
          MINOR=${MINOR#*.}
          PATCH=${VERSION##*.}
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=arm64dir::task_${MAJOR}.${MINOR}.${PATCH}_arm"
          echo "::set-output name=innerdir::task-${VERSION}"
      
      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.info.outputs.version }} Release
          draft: true
      
      - name: Create arm64 Directory
        run: mkdir -p ${{ steps.info.outputs.arm64dir }}

      - name: Download arm64 Artifacts
        uses: actions/download-artifact@v2
        with:
          name: arm64
          path: ${{ steps.info.outputs.arm64dir }}

      - name: Restore arm64 File Modes
        run: |
          chmod 755 ${{ steps.info.outputs.arm64dir }}/task*
      - name: Create arm64 tarball
        run: tar -zcvf ${{ steps.info.outputs.arm64dir }}.tar.gz ${{ steps.info.outputs.arm64dir }}

      - name: Upload arm64 Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.info.outputs.arm64dir }}.tar.gz
          asset_name: ${{ steps.info.outputs.arm64dir }}.tar.gz
          asset_content_type: application/gzip